uniq=$(if $(1),$(firstword $(1)) $(call uniq,$(filter-out $(firstword $(1)),$(1))))
CFLAGS= -Wall -Wextra -Werror $(DEBUG)
CC=/usr/bin/gcc
define clean_libname
$(1):=$$(filter-out %.a, $$($(1))) $$(foreach elt, $$(filter %.a, $$($(1))), $$(elt:%.a=%))

endef

define define_target_libs
$(1)_LIBS:=$($(1)_USELIBS) $($(1)_STDLIBS)

endef

define define_lib_incs
$(1)_INCS?=$($(1)_DIR) 

endef

define define_lib_mdir
$(1)_MDIR?=$($(1)_DIR)

endef

$(eval $(call clean_libname,LIBTARGETS))
TARGETS:=$(EXETARGETS) $(LIBTARGETS)
$(foreach target, $(TARGETS), $(eval $(call clean_libname,$(target)_USELIBS)) $(eval $(call clean_libname,$(target)_STDLIBS)))
USELIBS=$(foreach target,$(TARGETS),$($(target)_USELIBS))
USELIBS:=$(call uniq,$(USELIBS))
USEDIRS=$(foreach target,$(TARGETS), $($(target)_DIRS))
USEDIRS:=$(call uniq,$(USEDIRS))
vpath %.c $(USEDIRS)
USELIBSDIRS=$(foreach lib,$(USELIBS),$($(lib)_DIR))
USELIBSDIRS:=$(call uniq,$(USELIBSDIRS))
vpath %.a $(USELIBSDIRS)
$(foreach target, $(TARGETS),$(eval $(call define_target_libs,$(target))))
STDLIBS=$(foreach target,$(TARGETS),$($(target)_STDLIBS))
STDLIBS:=$(call uniq,$(STDLIBS))
LIBS:=$(STDLIBS) $(USELIBS)
$(foreach lib,$(LIBS),$(eval $(call define_lib_incs,$(lib))))
$(foreach lib, $(LIBS),$(eval $(call define_lib_mdir,$(lib))))
ifeq ($(RUSELIBS),)
RUSELIBS:=$(USELIBS)
else
RUSELIBS:=$(filter-out $(RUSELIBS),$(USELIBS))
endif
export RUSELIBS
export DEBUG

define target_include
$(foreach dir,$($(1)_INCS),$(dir:%=-I%)) $(foreach lib,$($(1)_LIBS),$(foreach dir,$($(lib)_INCS),$(dir:%=-I%)))
endef

define target_stdlibs_ld
$($(1)_STDLIB:lib%=-l%)
endef

define target_uselibs_inclusion
$(foreach lib, $($(1)_USELIBS), $($(lib)_DIR)/$(lib).a)
endef

define target_prerequisite
$$($(1)_SRCS:%.c=%.o) $$($(1)_USELIBS:%=%.a)
endef

define ruselib_rule
.PHONY:$(1).a
$(1).a:
	$$(MAKE) -C $$($(1)_MDIR) $(1).a
endef

define libtarget_rule
$(1).a:CFLAGS:=$(call target_include,$(1)) $$(CFLAGS)
$(1).a: $(call target_prerequisite,$(1))
	ar -rc $$@ $$(filter-out %.a, $$?)
	ranlib $$@
endef

define exetarget_rule
$(1):CFLAGS:=$(call target_include,$(1)) $$(CFLAGS)
$(1): $(call target_prerequisite,$(1))
	$$(CC) $$(CFLAGS) $$(filter-out %.a, $$^) $(call target_uselibs_inclusion,$(1)) -o $$@ $(call target_stdlibs_ld,$(1))
endef

define ruselib_rfclean_rule
.PHONY: rfclean_$(1)
rfclean_$(1):
	$$(MAKE) -C $$($(1)_MDIR) rfclean
endef

define ruselib_rre_rule
.PHONY: rfclean_$(1)
rre_$(1):
	$$(MAKE) -C $$($(1)_MDIR) rre
endef

TARGETS:=$(EXETARGETS) $(LIBTARGETS:%=%.a)
.PHONY: all
all: $(TARGETS)

.PHONY:clean
clean:
	rm -f *.o

.PHONY:fclean
fclean: clean
	rm -f $(TARGETS)

.PHONY:rfclean
rfclean:$(foreach lib, $(RUSELIBS), rfclean_$(lib)) fclean
	
.PHONY:re
re: fclean all

.PHONY: rre
rre: $(foreach lib, $(RUSELIBS), rre_$(lib)) re
	
$(foreach target,$(EXETARGETS), $(eval $(call exetarget_rule,$(target))))

$(foreach target,$(LIBTARGETS), $(eval $(call libtarget_rule,$(target))))

$(foreach lib,$(RUSELIBS), $(eval $(call ruselib_rule,$(lib))))

$(foreach lib,$(RUSELIBS),$(eval $(call ruselib_rfclean_rule,$(lib))))

$(foreach lib,$(RUSELIBS),$(eval $(call ruselib_rre_rule,$(lib))))
